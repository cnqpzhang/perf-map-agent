#!/bin/bash
#set -e
set -x

PERF_MAP_DIR=$(dirname $(readlink -f $0))/..
PID=$1

if [ -z "$PERF_JAVA_TMP" ]; then
  PERF_JAVA_TMP=/tmp
fi

if [ -z "$PERF_RECORD_SECONDS" ]; then
  PERF_RECORD_SECONDS=15
fi

if [ -z "$PERF_RECORD_FREQ" ]; then
  PERF_RECORD_FREQ=99
fi

if [ -z "$PERF_DATA_FILE" ]; then
  PERF_DATA_FILE=$PERF_JAVA_TMP/perf-$PID.data
fi

echo "Recording events for $PERF_RECORD_SECONDS seconds (adapt by setting PERF_RECORD_SECONDS)"

# CLOCKID_MAP("mono", CLOCK_MONOTONIC),    // 1 Starts at system boot time but stops during suspend
# CLOCKID_MAP("raw", CLOCK_MONOTONIC_RAW), // 4 rarely needed in the kernel
# CLOCKID_MAP("real", CLOCK_REALTIME),     // 0 should be avoided for internal uses
# CLOCKID_MAP("boot", CLOCK_BOOTTIME),     // 7 need to be synchronized with other machines across a suspend operation
for i in $(seq 1 3); do
  echo "Try count ${i}"
  sudo perf record -k 1 -e cpu-clock -F $PERF_RECORD_FREQ -o $PERF_DATA_FILE -g -p $* -- sleep $PERF_RECORD_SECONDS
  errcode=$?
  echo "Recording stopped with return value: ${errcode}"
  if [ "x${errcode}" = "x0" ]; then break; fi
done
$PERF_MAP_DIR/bin/create-java-perf-map.sh $PID "$PERF_MAP_OPTIONS"
